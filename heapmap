import React, { useEffect, useRef, useState } from "react";
import * as d3 from "d3";

const App = () => {
  const heatmapRef = useRef(null);
  const [selectedData, setSelectedData] = useState(null);

  useEffect(() => {
    // Fetch data from the API
    fetch("http://localhost:8080/company/datapoints")
      .then((response) => response.json())
      .then((data) => {
        renderHeatmap(data);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  }, []);

  const renderHeatmap = (data) => {
    // Data for the heatmap
    const heatmapData = data.map((item) => ({
      date: new Date(item.date),
      count: item.count,
    }));

    // Dimensions of the heatmap
    const height = 400;
    const cellSize = 15;
    const padding = 50;

    // Get the minimum and maximum dates from the data
    const minDate = d3.min(heatmapData, (d) => d.date);
    const maxDate = d3.max(heatmapData, (d) => d.date);

    // Generate an array of all months between the minDate and maxDate
    const allMonths = d3.timeMonths(
      d3.timeMonth.floor(minDate),
      d3.timeMonth.ceil(maxDate)
    );

    // Group the data by month
    const dataByMonth = d3.groups(heatmapData, (d) => d.date.getMonth());

    // Create a scale for the color of the heatmap
    const colorScale = d3
      .scaleSequential()
      .domain([0, d3.max(heatmapData, (d) => d.count)])
      .interpolator(d3.interpolateGreens);

    // Calculate the width of the heatmap based on the number of columns
    const numColumns = Math.ceil(
      d3.timeWeek.count(d3.timeMonth.floor(minDate), d3.timeMonth.ceil(maxDate))
    );
    const width = numColumns * cellSize + padding * 2;

    // Create the SVG container
    const svg = d3
      .select(heatmapRef.current)
      .append("svg")
      .attr("width", width)
      .attr("height", height);

    // Add headers for each month
    svg
      .append("g")
      .attr("class", "month-headers")
      .selectAll(".month-header")
      .data(allMonths)
      .enter()
      .append("text")
      .attr("class", "month-header")
      .text((d) => d3.timeFormat("%b")(d)) // Format the month using d3.timeFormat
      .attr("x", (d, i) => {
        const monthStartX =
          d3.timeWeek.count(d3.timeYear(d), d) * cellSize + padding;
        const monthEndX =
          d3.timeWeek.count(d3.timeYear(d), d3.timeMonth.offset(d, 1)) *
            cellSize +
          padding;
        return (monthStartX + monthEndX) / 2; // Center the month name in the cell
      })
      .attr("y", padding / 2 - cellSize / 2) // Position above the heatmap cells
      .style("text-anchor", "middle") // Center the text horizontally
      .style("font-size", "10px")
      .style("fill", "#444");

    // Create the heatmap cells
    const cells = svg
      .selectAll(".cell")
      .data(dataByMonth)
      .enter()
      .append("g")
      .attr("class", "month-group")
      .selectAll(".cell")
      .data((d) => d[1])
      .enter()
      .append("rect")
      .attr("class", "cell")
      .attr(
        "x",
        (d, i) =>
          d3.timeWeek.count(d3.timeYear(d.date), d.date) * cellSize + padding
      )
      .attr("y", (d) => d.date.getDay() * cellSize + padding)
      .attr("width", cellSize)
      .attr("height", cellSize)
      .attr("fill", (d) => colorScale(d.count))
      .on("mouseover", function(event, d) {
        const tooltip = d3.select(".tooltip");
        tooltip
          .style("display", "block")
          .style("left", width / 2 + "px")
          .style("top", padding / 2 + "px")
          .html(`Date: ${d.date.toDateString()}<br/>Count: ${d.count}`);
      })
      .on("mouseout", function() {
        d3.select(".tooltip").style("display", "none");
      })
      .on("click", function(event, d) {
        handleCellClick(d);
      });

    // Create and append the tooltip container
    const tooltip = d3
      .select(heatmapRef.current)
      .append("div")
      .attr("class", "tooltip")
      .style("display", "none")
      .style("position", "absolute")
      .style("text-align", "center")
      .style("padding", "8px")
      .style("background-color", "rgba(0, 0, 0, 0.7)")
      .style("color", "#fff")
      .style("font-size", "12px");

    // Rest of your D3 code...
  };

  const handleCellClick = (dataPoint) => {
    // Update the state with the selected data for rendering on the page
    setSelectedData(dataPoint);

    // Clear selectedData after 5 seconds
    setTimeout(() => {
      setSelectedData(null);
    }, 10000);
  };

  return (
    <div>
      <div
        style={{
          textAlign: "center",
          fontSize: "2",
          fontFamily: "sans-serif", // Using a basic sans-serif font
          marginTop: "20px",
        }}
      >
        {selectedData
          ? `Selected Date details are : ${selectedData.date.toDateString()}, Count of tickets : ${
              selectedData.count
            }`
          : ""}
      </div>
      <div
        ref={heatmapRef}
        style={{
          width: "100%",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      ></div>
    </div>
  );
};

export default App;
