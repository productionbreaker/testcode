package utils;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClients;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.util.List;

public class ApiUtils {
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static <T> T sendGetRequest(String url, List<Header> headers, Class<T> responseType) throws IOException, URISyntaxException {
        HttpClient httpClient = HttpClients.createDefault();
        HttpGet httpGet = new HttpGet(url);
        addHeaders(httpGet, headers);

        return executeRequest(httpClient, httpGet, responseType);
    }

    public static <T> T sendPostRequest(String url, List<Header> headers, Object requestBody, Class<T> responseType) throws IOException, URISyntaxException {
        HttpClient httpClient = HttpClients.createDefault();
        HttpPost httpPost = new HttpPost(url);
        addHeaders(httpPost, headers);

        if (requestBody != null) {
            String jsonRequestBody = objectMapper.writeValueAsString(requestBody);
            StringEntity entity = new StringEntity(jsonRequestBody, ContentType.APPLICATION_JSON);
            httpPost.setEntity(entity);
        }

        return executeRequest(httpClient, httpPost, responseType);
    }

    public static <T> T sendDeleteRequest(String url, List<Header> headers, Class<T> responseType) throws IOException, URISyntaxException {
        HttpClient httpClient = HttpClients.createDefault();
        HttpDelete httpDelete = new HttpDelete(url);
        addHeaders(httpDelete, headers);

        return executeRequest(httpClient, httpDelete, responseType);
    }

    private static void addHeaders(HttpRequestBase request, List<Header> headers) {
        if (headers != null) {
            for (Header header : headers) {
                request.addHeader(header.getName(), header.getValue());
            }
        }
    }

    private static <T> T executeRequest(HttpClient httpClient, HttpRequestBase request, Class<T> responseType) throws IOException {
        HttpResponse response = httpClient.execute(request);
        int statusCode = response.getStatusLine().getStatusCode();

        if (statusCode >= 200 && statusCode < 300) {
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()))) {
                    return objectMapper.readValue(reader, responseType);
                }
            }
        } else {
            throw new IOException("API call failed with status code: " + statusCode);
        } finally {
            httpClient.getConnectionManager().shutdown();
        }

        return null;
    }
}
