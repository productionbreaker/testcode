    @Query("SELECT DISTINCT i.incidentStartTime.date FROM Incident i " +
           "WHERE DAYOFWEEK(i.incidentStartTime) = 7 " + // Saturday
           "AND (SELECT COUNT(incident) FROM Incident incident " +
           "      WHERE DAYOFWEEK(incident.incidentStartTime) IN (1, 7)) > 0")
    List<LocalDate> getSaturdayDatesWithIncidents();



@Query("SELECT DISTINCT DATE_TRUNC('DAY', i.incidentStartTime) AS incidentDate " +
           "FROM Incident i " +
           "WHERE (i.incidentStartTime >= :sixMonthsAgo AND i.incidentStartTime <= :now) " +
           "AND (EXTRACT(DOW FROM i.incidentStartTime) = 6 OR EXTRACT(DOW FROM i.incidentStartTime) = 0) " +
           "GROUP BY incidentDate " +
           "HAVING COUNT(*) > 0")
    List<ZonedDateTime> findDatesWithIncidentsOnWeekend();




next week's data

public interface IncidentRepository extends JpaRepository<Incident, Long> {

    @Query("SELECT i.incidentStartTime AS startDate, COUNT(i) AS incidentCount FROM Incident i WHERE i.incidentStartTime BETWEEN :startDate AND (DATEADD(day, 7, :startDate)) GROUP BY i.incidentStartTime")
    List<Object[]> countIncidentsReportedWithin7DaysFromDate(@Param("startDate") ZonedDateTime startDate);
}

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;

public interface IncidentRepository extends JpaRepository<Incident, Long> {

    @Query("SELECT DATEPART(wk, i.incidentStartTime) - DATEPART(wk, :startDate) AS weekDiff, COUNT(i) AS incidentCount " +
           "FROM Incident i " +
           "WHERE i.incidentStartTime >= :startDate " +
           "GROUP BY weekDiff " +
           "HAVING weekDiff BETWEEN 0 AND 3")
    List<Map<String, Object>> countIncidentsByWeekFromDate(@Param("startDate") ZonedDateTime startDate);



}


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;

public interface IncidentRepository extends JpaRepository<Incident, Long> {

    @Query("SELECT DATEPART(wk, i.incidentStartTime) - DATEPART(wk, :startDate) AS weekDiff, COUNT(i) AS incidentCount " +
           "FROM Incident i " +
           "WHERE i.incidentStartTime >= :startDate " +
           "GROUP BY weekDiff " +
           "HAVING weekDiff BETWEEN 0 AND 3")
    List<Map<String, Object>> countIncidentsByWeekFromDate(@Param("startDate") ZonedDateTime startDate);
}

============
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class DateConversion {
    public static void main(String[] args) {
        List<String> stringDates = new ArrayList<>();
        stringDates.add("2023-07-16");
        stringDates.add("2023-08-20");
        // Add more string dates as needed

        List<Date> dateObjects = convertStringDatesToDateObjects(stringDates);

        for (Date date : dateObjects) {
            System.out.println(date);
        }
    }

    public static List<Date> convertStringDatesToDateObjects(List<String> stringDates) {
        List<Date> dateObjects = new ArrayList<>();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        for (String dateString : stringDates) {
            try {
                Date date = dateFormat.parse(dateString);
                dateObjects.add(date);
            } catch (ParseException e) {
                // Handle the parsing exception if necessary
                e.printStackTrace();
            }
        }

        return dateObjects;
    }
}



@Query("SELECT FLOOR((TRUNC(i.incidentStartTime) - TRUNC(:startDate)) / 7) AS weekDiff, COUNT(i) AS incidentCount " +
           "FROM Incident i " +
           "WHERE i.incidentStartTime >= :startDate " +
           "GROUP BY weekDiff " +
           "HAVING weekDiff BETWEEN 0 AND 3")
    List<Map<String, Object>> countIncidentsByWeekFromDate(@Param("startDate") ZonedDateTime startDate);
