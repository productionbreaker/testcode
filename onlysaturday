    @Query("SELECT DISTINCT i.incidentStartTime.date FROM Incident i " +
           "WHERE DAYOFWEEK(i.incidentStartTime) = 7 " + // Saturday
           "AND (SELECT COUNT(incident) FROM Incident incident " +
           "      WHERE DAYOFWEEK(incident.incidentStartTime) IN (1, 7)) > 0")
    List<LocalDate> getSaturdayDatesWithIncidents();



@Query("SELECT DISTINCT DATE_TRUNC('DAY', i.incidentStartTime) AS incidentDate " +
           "FROM Incident i " +
           "WHERE (i.incidentStartTime >= :sixMonthsAgo AND i.incidentStartTime <= :now) " +
           "AND (EXTRACT(DOW FROM i.incidentStartTime) = 6 OR EXTRACT(DOW FROM i.incidentStartTime) = 0) " +
           "GROUP BY incidentDate " +
           "HAVING COUNT(*) > 0")
    List<ZonedDateTime> findDatesWithIncidentsOnWeekend();




next week's data

public interface IncidentRepository extends JpaRepository<Incident, Long> {

    @Query("SELECT i.incidentStartTime AS startDate, COUNT(i) AS incidentCount FROM Incident i WHERE i.incidentStartTime BETWEEN :startDate AND (DATEADD(day, 7, :startDate)) GROUP BY i.incidentStartTime")
    List<Object[]> countIncidentsReportedWithin7DaysFromDate(@Param("startDate") ZonedDateTime startDate);
}


